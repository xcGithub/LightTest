<#@ include file=".\SchemaReader.ttinclude" #>
<#+  
		 
Tables LoadTables()
{ 

	WriteLine("// This file was automatically generated by the Dapper.SimpleCRUD T4 Template");
	WriteLine("// Do not make changes directly to this file - edit the template instead");
	WriteLine("// ");
	WriteLine("// The following connection settings were used to generate this file");
	WriteLine("// ");
	WriteLine("//     Connection String : `{0}`", ConnectionString); 
	WriteLine("");

    //DbProviderFactory _factory ;
	try
	{
		// _factory = DbProviderFactories.GetFactory(ProviderName);
	}
	catch (Exception x)
	{
		var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
		WriteLine("");
		WriteLine("// -----------------------------------------------------------------------------------------");
		WriteLine("// -----------------------------------------------------------------------------------------");
		WriteLine("");
		return new Tables();
	}

	try
	{
		Tables result;
		
		SchemaReader reader= new OracleSchemaReader();
		result=reader.ReadSchema(ConnectionString, TableFilter);
		
		for (int i=result.Count-1; i>=0; i--)
		{
			if (SchemaName!=null && string.Compare(result[i].Schema, SchemaName, true)!=0)
			{
				result.RemoveAt(i);
				continue;
			}
			if (!IncludeViews && result[i].IsView)
			{
				result.RemoveAt(i);
				continue;
			}
		}

		

		var rxClean = new Regex("^(Equals|GetHashCode|GetType|ToString|repo|Save|IsNew|Insert|Update|Delete|Exists|SingleOrDefault|Single|First|FirstOrDefault|Fetch|Page|Query)$");
		foreach (var t in result)
		{
			t.ClassName = ClassPrefix + t.ClassName + ClassSuffix;
			foreach (var c in t.Columns)
			{
				c.PropertyName = rxClean.Replace(c.PropertyName, "_$1");

				// Make sure property name doesn't clash with class name
				if (c.PropertyName == t.ClassName)
					c.PropertyName = "_" + c.PropertyName;
			}
		}

		    return result;
	}
	catch (Exception x)
	{
		var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
		Warning(string.Format("Failed to read database schema - {0}", error));
		WriteLine("");
		WriteLine("// -----------------------------------------------------------------------------------------");
		WriteLine("// Failed to read database schema - {0}", error);
		WriteLine("// -----------------------------------------------------------------------------------------");
		WriteLine("");
		return new Tables();
	}

        
}

class OracleSchemaReader : SchemaReader
{
		private string _connstr {get;set;}
        public override Tables ReadSchema(string connstr, string tableFilter)
        {
			_connstr = connstr; 

            var result = new Tables();
            using (var rdr = ExecuteReader(TABLE_SQL + tableFilter))
            {
                while (rdr.Read())
                {
                    Table tbl = new Table();
                    tbl.Name = rdr["TABLE_NAME"].ToString();
                    //tbl.Schema = rdr["TABLE_SCHEMA"].ToString();
                    //tbl.IsView = string.Compare(rdr["TABLE_TYPE"].ToString(), "View", true) == 0;
                    //tbl.CleanName = CleanUp(tbl.Name);
                    tbl.CleanName = CleanUp(tbl.Name);
                    if (tbl.CleanName.StartsWith("tbl_")) tbl.CleanName = tbl.CleanName.Replace("tbl_", "");
                    if (tbl.CleanName.StartsWith("tbl")) tbl.CleanName = tbl.CleanName.Replace("tbl", "");
                    tbl.CleanName = tbl.CleanName.Replace("_", "");
                    tbl.ClassName = tbl.CleanName;

                    result.Add(tbl);
                }
            }

            foreach (var tbl in result)
            {
                tbl.Columns = LoadColumns(tbl);  

                //Mark the primary key
                string PrimaryKey = GetPK(tbl.Schema, tbl.Name);
                var pkColumn = tbl.Columns.SingleOrDefault(x => x.Name.ToLower().Trim() == PrimaryKey.ToLower().Trim());
                if (pkColumn != null)
                {
                    pkColumn.IsPK = true;
                }
            }


            return result;
        }

        List<Column> LoadColumns(Table tbl)
        {
			var result = new List<Column>();
			using (IDataReader rdr = ExecuteReader( COLUMN_SQL.Replace(":tableName", "'" + tbl.Name + "'") ))
			{
				while (rdr.Read())
				{
					Column col = new Column();
					col.Name = rdr["Column_Name"].ToString();
					col.PropertyName = CleanUp(col.Name);
					col.PropertyType = GetPropertyType(rdr["Data_Type"].ToString().ToLower());
					col.DbType = GetOracleDbType(rdr["Data_Type"].ToString());
					col.IsNullable = rdr["Nullable"].ToString() == "Y";
					//col.IsAutoIncrement = false; //((int)rdr["IsIdentity"]) == 1;
					result.Add(col);
				}
				return result;
            }
        }

        string GetPK(string schema, string table)
        {
			var result = ExecuteScalar( PK_SQL.Replace(":tableName", "'" + table + "'")  );
			if (result != null)
				return result.ToString();
            return "";
        }
		
        string GetPropertyType(string sqlType)
        { 
            string sysType = "string";
            switch (sqlType)
            {
                case "bigint":
                    sysType = "long";
                    break;
                case "smallint":
                    sysType = "short";
                    break;
                case "int":
				case "number":
				case "integer":
                    sysType = "int";
                    break;
                case "uniqueidentifier":
                    sysType = "Guid";
                    break;
                case "smalldatetime":
                case "datetime":
                case "date":
                case "time":
                    sysType = "DateTime";
                    break;
                case "float":
                    sysType = "double";
                    break;
                case "real":
                    sysType = "float";
                    break;
                case "numeric":
                case "smallmoney":
                case "decimal":
                case "money":
                    sysType = "decimal";
                    break;
                case "tinyint":
                    sysType = "byte";
                    break;
                case "bit":
                    sysType = "bool";
                    break;
                case "image":
                case "binary":
                case "varbinary":
                case "timestamp":
                    sysType = "byte[]";
                    break;
                case "geography":
                    sysType = "Microsoft.SqlServer.Types.SqlGeography";
                    break;
                case "geometry":
                    sysType = "Microsoft.SqlServer.Types.SqlGeometry";
                    break;
            }
            return sysType;
        }

		string GetOracleDbType(string sqlType)
        {
			switch (sqlType)
			{
				case "Number" : sqlType = "Int32"; 
				break;
			}
			

			return sqlType.Substring(0, 1) + sqlType.Substring(1).ToLower();
		}
		
		string Table_Filter =  " where table_name in ( 'CICUSER', 'CICROLE', 'CICUSERROLE') ";

        const string PK_SQL = @"select column_name ColumnName from user_cons_columns cu, user_constraints au where cu.constraint_name = au.constraint_name and au.constraint_type = 'P' and au.table_name = :tableName";

        const string TABLE_SQL = " select * from user_tables  ";

        const string COLUMN_SQL = " select Table_Name, Column_Name, Data_Type, Data_Length , Nullable, Data_Default from user_tab_cols  where table_name = :tableName ";

		public OracleDataReader ExecuteReader(string cmdText)
        {
            OracleDataReader reader = null;
			OracleConnection connection = new OracleConnection(_connstr);
			OracleCommand command = new OracleCommand(cmdText,connection);
            try
            {
                connection.Open();
                reader = command.ExecuteReader(CommandBehavior.CloseConnection);
                command.Parameters.Clear();
                return reader;
            }
            catch
            {
                command.Dispose();
                connection.Close();
                throw;
            }

		}
		
		public object ExecuteScalar(string cmdText)
        { 
			OracleConnection connection = new OracleConnection(_connstr);
			OracleCommand command = new OracleCommand(cmdText,connection);
            object result = null;
            try
            {
                connection.Open(); 
                result = command.ExecuteScalar();
                return result;
            }
            catch
            {
                command.Dispose();
                connection.Close();
                throw;
            }
		}

}
#>