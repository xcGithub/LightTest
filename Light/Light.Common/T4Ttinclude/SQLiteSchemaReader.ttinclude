<#@ include file=".\SchemaReader.ttinclude" #>
<#+  
Tables LoadTables()
{ 

	WriteLine("// This file was automatically generated by the Dapper.SimpleCRUD T4 Template");
	WriteLine("// Do not make changes directly to this file - edit the template instead");
	WriteLine("// ");
	WriteLine("// The following connection settings were used to generate this file");
	WriteLine("// ");
	WriteLine("//     Connection String : `{0}`", ConnectionString); 
	WriteLine("");

    //DbProviderFactory _factory ;
	try
	{
		// _factory = DbProviderFactories.GetFactory(ProviderName);
	}
	catch (Exception x)
	{
		var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
		WriteLine("");
		WriteLine("// -----------------------------------------------------------------------------------------");
		WriteLine("// -----------------------------------------------------------------------------------------");
		WriteLine("");
		return new Tables();
	}

	try
	{
		Tables result;
		
		SchemaReader reader= new SqliteSchemaReader();
		result=reader.ReadSchema(ConnectionString, TableFilter);
		
		for (int i=result.Count-1; i>=0; i--)
		{
			if (SchemaName!=null && string.Compare(result[i].Schema, SchemaName, true)!=0)
			{
				result.RemoveAt(i);
				continue;
			}
			if (!IncludeViews && result[i].IsView)
			{
				result.RemoveAt(i);
				continue;
			}
		}

		

		var rxClean = new Regex("^(Equals|GetHashCode|GetType|ToString|repo|Save|IsNew|Insert|Update|Delete|Exists|SingleOrDefault|Single|First|FirstOrDefault|Fetch|Page|Query)$");
		foreach (var t in result)
		{
			t.ClassName = ClassPrefix + t.ClassName + ClassSuffix;
			foreach (var c in t.Columns)
			{
				c.PropertyName = rxClean.Replace(c.PropertyName, "_$1");

				// Make sure property name doesn't clash with class name
				if (c.PropertyName == t.ClassName)
					c.PropertyName = "_" + c.PropertyName;
			}
		}

		    return result;
	}
	catch (Exception x)
	{
		var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
		Warning(string.Format("Failed to read database schema - {0}", error));
		WriteLine("");
		WriteLine("// -----------------------------------------------------------------------------------------");
		WriteLine("// Failed to read database schema - {0}", error);
		WriteLine("// -----------------------------------------------------------------------------------------");
		WriteLine("");
		return new Tables();
	}

        
}

class SqliteSchemaReader : SchemaReader
    {
		 
		private	string _connstr {get;set;}

        public override Tables ReadSchema(string connstr, string tableFilter)
        { 
			_connstr = connstr;
            var result = new Tables(); 
            //pull the tables in a reader 
            using (IDataReader rdr = ExecuteReader(TABLE_SQL + tableFilter)) // SQLitehelper.
            {
                while (rdr.Read())
                {
                    Table tbl = new Table();
                    tbl.Name = rdr["name"].ToString();
                    //tbl.Schema = rdr["TABLE_SCHEMA"].ToString();
                    //tbl.IsView = string.Compare(rdr["TABLE_TYPE"].ToString(), "View", true) == 0;
                    tbl.CleanName = CleanUp(tbl.Name);
                    // tbl.CleanName = T4Generator.CleanUp(tbl.Name);
                    if (tbl.CleanName.StartsWith("tbl_")) tbl.CleanName = tbl.CleanName.Replace("tbl_", "");
                    if (tbl.CleanName.StartsWith("tbl")) tbl.CleanName = tbl.CleanName.Replace("tbl", "");
                    tbl.CleanName = tbl.CleanName.Replace("_", "");
                    tbl.ClassName = tbl.CleanName;

                    result.Add(tbl);
                }
           } 

            foreach (var tbl in result)
            {
                tbl.Columns = LoadColumns(tbl);

                //Mark the primary key
                //string PrimaryKey = GetPK(tbl.Schema, tbl.Name);
                //var pkColumn = tbl.Columns.SingleOrDefault(x => x.Name.ToLower().Trim() == PrimaryKey.ToLower().Trim());
                //if (pkColumn != null)
                //{
                //    pkColumn.IsPK = true;
                //}
            }


            return result;
        }

        List<Column> LoadColumns(Table tbl)
        {
            var result = new List<Column>();
            using (IDataReader rdr = ExecuteReader(COLUMN_SQL.Replace("@tableName", tbl.Name))) // SQLitehelper.
            {
                while (rdr.Read())
                {
                    Column col = new Column();
                    col.Name = rdr["name"].ToString();
                    col.PropertyName = CleanUp(col.Name);
                    //col.PropertyName = T4Generator.CleanUp(col.Name);
                    col.PropertyType = base.GetPropertyType(rdr["type"].ToString().ToLower());
                    col.IsNullable = rdr["notnull"].ToString() != "1";
                    //col.IsAutoIncrement = false; //((int)rdr["IsIdentity"]) == 1;
                    col.IsPK = rdr["pk"].ToString() == "1";
                    result.Add(col);
                }
            }

            return result;
        }
		
		string Table_Filter =  " ";

        const string TABLE_SQL = " select name from sqlite_master where type = 'table' ";

        const string COLUMN_SQL = " PRAGMA table_info(@tableName) ";
		
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="sql">sql语句</param>
        /// <param name="slPars">参数</param>
        /// <returns>发挥SQLiteDataReader</returns>
        public SQLiteDataReader ExecuteReader(string sql, params SQLiteParameter[] slPars)
        {
            SQLiteConnection conn = new SQLiteConnection(_connstr);
            using (SQLiteCommand cmd = new SQLiteCommand(sql,conn))
            {
                if (slPars != null)
                {
                    cmd.Parameters.AddRange(slPars);
                } 
                try
                {
                    conn.Open();
                    return cmd.ExecuteReader(CommandBehavior.CloseConnection);
                }
                catch(Exception ex)
                {
                    conn.Close();
                    conn.Dispose();
                    throw ex;
                }

            }

        }

    } 
#>